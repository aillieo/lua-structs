local test = {}

function test.testStack()
    print("----- LusStack -----")
    local LuaStack = require("lua-structs/LuaStack")
    local ls = LuaStack.New()
    print(tostring(ls))
    ls:Push(1)
    ls:Push(2)
    ls:Push(3)
    print(tostring(ls))
    ls:Pop()
    ls:Pop()
    ls:Push(4)
    print(tostring(ls))
    print(ls:Count())
    print(ls:Peek())
    ls:Push(5)
    ls:Push(6)
    print(tostring(ls))
    print(ls:Count())
    print(ls:Peek())
end

function test.testQueue()
    print("----- LuaQueue -----")
    local LuaQueue = require("lua-structs/LuaQueue")
    local lq = LuaQueue.New()
    print(tostring(lq))
    lq:Enque(1)
    lq:Enque(2)
    lq:Enque(3)
    print(tostring(lq))
    lq:Deque()
    lq:Deque()
    lq:Enque(4)
    print(lq:Count())
    print(tostring(lq))
    lq:Enque(5)
    print(lq:Count())
    print(tostring(lq))
end

function test.testList()
    print("----- LuaList -----")
    local LuaList = require("lua-structs/LuaList")
    local ll = LuaList.New()
    print(tostring(ll))
    local lastNode = ll:AddLast("last")
    local firstNode = ll:AddFirst("first")
    print(tostring(ll))
    local lastButOneNode = ll:AddBefore(lastNode,"lastButOne")
    local firstButOneNode = ll:AddAfter(firstNode,"firstButOne")
    print(tostring(ll))
    print(tostring(ll:Count()))
    ll:RemoveNode(lastNode)
    print(tostring(ll))
    ll:AddNodeLast(lastNode)
    print(tostring(ll))
    local realFistNode = ll:AddFirst("realFirst")
    print(ll:First().value)
    print(ll:Last().value)
    print(tostring(ll))
    ll:RemoveNode(realFistNode)
    ll:RemoveNode(firstNode)
    ll:AddNodeFirst(realFistNode)
    print(tostring(ll))
    ll:AddAfter(firstButOneNode,"middle1")
    ll:AddBefore(lastButOneNode,"middle2")
    print(tostring(ll))
    ll:RemoveLast()
    print(tostring(ll))
    ll:Remove("middle1")
    print(tostring(ll))
    local f = ll:Find("middle2")
    print(f.value)
    f = ll:FindLast("middle2")
    print(f.value)
    print(tostring(ll:Count()))
    ll:Clear()
    print(tostring(ll:Count()))
end

function test.testHeap()
    print("----- LuaHeap -----")
    local LuaHeap = require("lua-structs/LuaHeap")
    local lh = LuaHeap.New()
    lh:Push(1)
    lh:Push(3)
    lh:Push(4)
    lh:Push(5)
    lh:Push(0)
    lh:Push(-10)

    print(lh:Pop())
    print(lh:Pop())
    print(lh:Pop())
    print(lh:Pop())
    print(lh:Pop())
    print(lh:Pop())
end

function test.testTreeMap()
    print("----- LuaTreeMap -----")
    local LuaTreeMap = require("lua-structs/LuaTreeMap")
    local ltm = LuaTreeMap.New()

    ltm:Add(3,3)
    print(ltm:Count())
    print(ltm)
    ltm:Remove(3)
    print(ltm)
    ltm:Add(1,2)
    print(ltm)

    ltm:Add(100,3)
    print(ltm)

    ltm:Add(2,"o")
    print(ltm:Count())
    print(ltm)

    ltm:Add(80,"s")
    print(ltm)

    ltm:Remove(3)
    print(ltm)

    ltm:Add(16,"a")
    ltm:Add(14,"s")
    ltm:Add(13,"w")
    ltm:Add(19,"d")
    print(ltm)

    ltm:Remove(1)
    ltm:Remove(2)
    print(ltm)
end

test.testStack()
test.testQueue()
test.testList()
test.testHeap()
test.testTreeMap()

return test
